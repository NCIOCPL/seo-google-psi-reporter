const nock = require('nock');

const Fetcher = require('../fetcher');
const PsiProcessor = require('../psi-processor');
const PsiUrlFetcher = require('../psi-url-fetcher');
const QueueStorage = require('../queue-storage');
const SitemapScraper = require('../sitemap-scraper');
const PageTypeFetcher = require('../page-type-fetcher');

describe('Fetcher', () => {

  /*
    GENERAL NOTE: I had mocked the "fetch" functions, however it was very easy
    to have passing tests because I had not updated the mock's return. So this
    has been changed to just use nocks, as the HTTP responses do not change as
    it is external whenever *our* code changes.
   */

  let spy = {};

  beforeAll(() => {
    nock.disableNetConnect();
    // We want this to get it to shutup so console logging messages in our
    // code do not appear on the console.
    spy.consoleLog = jest.spyOn(console, 'log').mockImplementation(() => {});
    // We need this to check that we are logging an error in some tests.
    spy.consoleError = jest.spyOn(console, 'error').mockImplementation(() => {});
	});

	afterAll(() => {
		nock.cleanAll();
    nock.enableNetConnect();
    spy.consoleLog.mockRestore();
    spy.consoleError.mockRestore();
  });


  test('It works with default batch size', async () => {

    // Example.org mocks
    const exampleScope = nock('https://example.org')
      // Sitemap Mock.
      .get('/sitemap.xml')
        .reply(200, `<?xml version="1.0" encoding="UTF-8"?>
          <?xml-stylesheet type="text/xsl" href="/sitemap.xsl"?>
          <!--Generated by the Simple XML Sitemap Drupal module: https://drupal.org/project/simple_sitemap.-->
          <urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9" xmlns:xhtml="http://www.w3.org/1999/xhtml" xmlns:image="http://www.google.com/schemas/sitemap-image/1.1">
          <url>
            <loc>https://example.org/test-web-page</loc>
            <xhtml:link rel="alternate" hreflang="en" href="https://example.org/test-web-page/"/>
            <changefreq>daily</changefreq>
            <priority>1.0</priority>
          </url>
          <url>
            <loc>https://example.org/some-file.pdf</loc>
            <xhtml:link rel="alternate" hreflang="en" href="https://example.org/some-file.pdf"/>
            <lastmod>2019-06-29T10:09:46-04:00</lastmod>
            <changefreq>weekly</changefreq>
            <priority>0.5</priority>
          </url>
          </urlset>
        `)
      // Page Type Fetcher
      .head('/test-web-page')
        .reply(200, {}, {
          'content-type': 'text/html; charset=UTF-8',
        })
      .head('/some-file.pdf')
        .reply(200, {}, {
          'content-type': 'application/pdf',
      });
    
    // www.googleapis.com mocks
    const psiScope = nock('https://www.googleapis.com')
      // PSI URL Fetcher
      .get('/pagespeedonline/v5/runPagespeed/')
        .query({
          url: 'https://example.org/test-web-page',
          key: '11111',
          category: [ 'ACCESSIBILITY', 'BEST_PRACTICES', 'PERFORMANCE', 'PWA', 'SEO' ],
          strategy: 'DESKTOP',
        })
        .reply(200, {a: 1})
      .get('/pagespeedonline/v5/runPagespeed/')
        .query({
          url: 'https://example.org/test-web-page',
          key: '11111',
          category: [ 'ACCESSIBILITY', 'BEST_PRACTICES', 'PERFORMANCE', 'PWA', 'SEO' ],
          strategy: 'MOBILE',
        })
        .reply(200, {a: 2});

    const psiPageFetcher = new PsiUrlFetcher({ apikey: '11111' });
    const psiProcessor = new PsiProcessor(psiPageFetcher);    
    const sitemapScraper = new SitemapScraper();
    const pageTypeFetcher = new PageTypeFetcher();
    const queueStorage = new QueueStorage(":memory:");
    
    const fetcher = new Fetcher(psiProcessor, sitemapScraper, pageTypeFetcher, queueStorage);
    await fetcher.fetch('https://example.org/sitemap.xml');

    // Make sure the queue is as expected and everything was fetched.
    const expectedQueue = [
      { id: 1, status: 'FETCHED', url: 'https://example.org/test-web-page', strategy: 'DESKTOP', errormessage: null, report: {a: 1} },
      { id: 2, status: 'FETCHED', url: 'https://example.org/test-web-page', strategy: 'MOBILE', errormessage: null, report: {a: 2} }
    ]
    const actualQueue = queueStorage.getQueueItems({ includeReports: true });
    expect(actualQueue).toEqual(expectedQueue);

    // Make sure the ignore URLs are as they should be.
    const expectedIgnoreUrls = [
      { id: 1, url: 'https://example.org/some-file.pdf', status: 200, contenttype: 'application/pdf' }
    ];
    const actualIgnoreUrls = queueStorage.getIgnoreUrls();
    expect(actualIgnoreUrls).toEqual(expectedIgnoreUrls);

    exampleScope.isDone();
    psiScope.isDone();
  });


  test('It does not add enqueued urls to the queue, does not fetch fetched', async () => {

    // Example.org mocks
    const exampleScope = nock('https://example.org')
      // Sitemap Mock.
      .get('/sitemap.xml')
        .reply(200, `<?xml version="1.0" encoding="UTF-8"?>
          <?xml-stylesheet type="text/xsl" href="/sitemap.xsl"?>
          <!--Generated by the Simple XML Sitemap Drupal module: https://drupal.org/project/simple_sitemap.-->
          <urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9" xmlns:xhtml="http://www.w3.org/1999/xhtml" xmlns:image="http://www.google.com/schemas/sitemap-image/1.1">
          <url>
            <loc>https://example.org/test-web-page</loc>
            <xhtml:link rel="alternate" hreflang="en" href="https://example.org/test-web-page/"/>
            <changefreq>daily</changefreq>
            <priority>1.0</priority>
          </url>
          <url>
            <loc>https://example.org/test-web-page2</loc>
            <xhtml:link rel="alternate" hreflang="en" href="https://example.org/test-web-page/"/>
            <changefreq>daily</changefreq>
            <priority>1.0</priority>
          </url>
          <url>
            <loc>https://example.org/test-web-page3</loc>
            <xhtml:link rel="alternate" hreflang="en" href="https://example.org/test-web-page/"/>
            <changefreq>daily</changefreq>
            <priority>1.0</priority>
          </url>
          <url>
            <loc>https://example.org/some-file.pdf</loc>
            <xhtml:link rel="alternate" hreflang="en" href="https://example.org/some-file.pdf"/>
            <lastmod>2019-06-29T10:09:46-04:00</lastmod>
            <changefreq>weekly</changefreq>
            <priority>0.5</priority>
          </url>
          <url>
            <loc>https://example.org/some-file2.pdf</loc>
            <xhtml:link rel="alternate" hreflang="en" href="https://example.org/some-file.pdf"/>
            <lastmod>2019-06-29T10:09:46-04:00</lastmod>
            <changefreq>weekly</changefreq>
            <priority>0.5</priority>
          </url>          
          </urlset>
        `)
      // Page Type Fetcher
      .head('/test-web-page3')
        .reply(200, {}, {
          'content-type': 'text/html; charset=UTF-8',
        })
      .head('/some-file2.pdf')
        .reply(200, {}, {
          'content-type': 'application/pdf',
      });
    
    // www.googleapis.com mocks
    const psiScope = nock('https://www.googleapis.com')
      // PSI URL Fetcher
      .get('/pagespeedonline/v5/runPagespeed/')
        .query({
          url: 'https://example.org/test-web-page2',
          key: '11111',
          category: [ 'ACCESSIBILITY', 'BEST_PRACTICES', 'PERFORMANCE', 'PWA', 'SEO' ],
          strategy: 'DESKTOP',
        })
        .reply(200, {a: 1})
      .get('/pagespeedonline/v5/runPagespeed/')
        .query({
          url: 'https://example.org/test-web-page2',
          key: '11111',
          category: [ 'ACCESSIBILITY', 'BEST_PRACTICES', 'PERFORMANCE', 'PWA', 'SEO' ],
          strategy: 'MOBILE',
        })
        .reply(200, {a: 2})
      .get('/pagespeedonline/v5/runPagespeed/')
        .query({
          url: 'https://example.org/test-web-page3',
          key: '11111',
          category: [ 'ACCESSIBILITY', 'BEST_PRACTICES', 'PERFORMANCE', 'PWA', 'SEO' ],
          strategy: 'DESKTOP',
        })
        .reply(200, {a: 1})
      .get('/pagespeedonline/v5/runPagespeed/')
        .query({
          url: 'https://example.org/test-web-page3',
          key: '11111',
          category: [ 'ACCESSIBILITY', 'BEST_PRACTICES', 'PERFORMANCE', 'PWA', 'SEO' ],
          strategy: 'MOBILE',
        })
        .reply(200, {a: 2});        

    const psiPageFetcher = new PsiUrlFetcher({ apikey: '11111' });
    const psiProcessor = new PsiProcessor(psiPageFetcher);    
    const sitemapScraper = new SitemapScraper();
    const pageTypeFetcher = new PageTypeFetcher();
    const queueStorage = new QueueStorage(":memory:");
    
    const fetcher = new Fetcher(psiProcessor, sitemapScraper, pageTypeFetcher, queueStorage);

    // Populate ignore urls and queue to simulate a previous run.
    queueStorage.addIgnoreUrls([
      { url: 'https://example.org/some-file.pdf', status: 200, contenttype: 'application/pdf' }
    ]);

    queueStorage.enqueueItems([
      {url: 'https://example.org/test-web-page', strategy: 'DESKTOP'},
      {url: 'https://example.org/test-web-page', strategy: 'MOBILE'},
      {url: 'https://example.org/test-web-page2', strategy: 'DESKTOP'},
      {url: 'https://example.org/test-web-page2', strategy: 'MOBILE'}
    ]);

    queueStorage.updateStatus(1, 'FETCHED', null, {a:1});
    queueStorage.updateStatus(2, 'FETCHED', null, {a:2});

console.log('Awaiting Fetch');
    await fetcher.fetch('https://example.org/sitemap.xml');
console.log('Fetched');

    // Make sure the queue is as expected and everything was fetched.
    const expectedQueue = [
      { id: 1, status: 'FETCHED', url: 'https://example.org/test-web-page', strategy: 'DESKTOP', errormessage: null, report: {a: 1} },
      { id: 2, status: 'FETCHED', url: 'https://example.org/test-web-page', strategy: 'MOBILE', errormessage: null, report: {a: 2} },
      { id: 3, status: 'FETCHED', url: 'https://example.org/test-web-page2', strategy: 'DESKTOP', errormessage: null, report: {a: 1} },
      { id: 4, status: 'FETCHED', url: 'https://example.org/test-web-page2', strategy: 'MOBILE', errormessage: null, report: {a: 2} },
      { id: 5, status: 'FETCHED', url: 'https://example.org/test-web-page3', strategy: 'DESKTOP', errormessage: null, report: {a: 1} },
      { id: 6, status: 'FETCHED', url: 'https://example.org/test-web-page3', strategy: 'MOBILE', errormessage: null, report: {a: 2} }
    ]
    const actualQueue = queueStorage.getQueueItems({ includeReports: true });
    expect(actualQueue).toEqual(expectedQueue);

    // Make sure the ignore URLs are as they should be.
    const expectedIgnoreUrls = [
      { id: 1, url: 'https://example.org/some-file.pdf', status: 200, contenttype: 'application/pdf' },
      { id: 2, url: 'https://example.org/some-file2.pdf', status: 200, contenttype: 'application/pdf' }
    ];
    const actualIgnoreUrls = queueStorage.getIgnoreUrls();
    expect(actualIgnoreUrls).toEqual(expectedIgnoreUrls);

    exampleScope.isDone();
    psiScope.isDone();

  });

  test('It works with PSI API Errors', async () => {
    
    // Example.org mocks
    const exampleScope = nock('https://example.org')
      // Sitemap Mock.
      .get('/sitemap.xml')
        .reply(200, `<?xml version="1.0" encoding="UTF-8"?>
          <?xml-stylesheet type="text/xsl" href="/sitemap.xsl"?>
          <!--Generated by the Simple XML Sitemap Drupal module: https://drupal.org/project/simple_sitemap.-->
          <urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9" xmlns:xhtml="http://www.w3.org/1999/xhtml" xmlns:image="http://www.google.com/schemas/sitemap-image/1.1">
          <url>
            <loc>https://example.org/test-web-page</loc>
            <xhtml:link rel="alternate" hreflang="en" href="https://example.org/test-web-page/"/>
            <changefreq>daily</changefreq>
            <priority>1.0</priority>
          </url>
          </urlset>
        `)
      // Page Type Fetcher
      .head('/test-web-page')
        .reply(200, {}, {
          'content-type': 'text/html; charset=UTF-8',
        });
    
    // www.googleapis.com mocks
    const psiScope = nock('https://www.googleapis.com')
      // PSI URL Fetcher
      .get('/pagespeedonline/v5/runPagespeed/')
        .query({
          url: 'https://example.org/test-web-page',
          key: '11111',
          category: [ 'ACCESSIBILITY', 'BEST_PRACTICES', 'PERFORMANCE', 'PWA', 'SEO' ],
          strategy: 'DESKTOP',
        })
        .reply(400)
      .get('/pagespeedonline/v5/runPagespeed/')
        .query({
          url: 'https://example.org/test-web-page',
          key: '11111',
          category: [ 'ACCESSIBILITY', 'BEST_PRACTICES', 'PERFORMANCE', 'PWA', 'SEO' ],
          strategy: 'MOBILE',
        })
        .reply(200, {a: 2});

    const psiPageFetcher = new PsiUrlFetcher({ apikey: '11111' });
    const psiProcessor = new PsiProcessor(psiPageFetcher);    
    const sitemapScraper = new SitemapScraper();
    const pageTypeFetcher = new PageTypeFetcher();
    const queueStorage = new QueueStorage(":memory:");
    
    const fetcher = new Fetcher(psiProcessor, sitemapScraper, pageTypeFetcher, queueStorage);
    await fetcher.fetch('https://example.org/sitemap.xml');

    // Make sure the queue is as expected and everything was fetched.
    const expectedQueue = [
      { id: 1, status: 'FAILED', url: 'https://example.org/test-web-page', strategy: 'DESKTOP', errormessage: 'Request failed with status code 400', report: null },
      { id: 2, status: 'FETCHED', url: 'https://example.org/test-web-page', strategy: 'MOBILE', errormessage: null, report: {a: 2} }
    ]
    const actualQueue = queueStorage.getQueueItems({ includeReports: true });
    expect(actualQueue).toEqual(expectedQueue);

    exampleScope.isDone();
    psiScope.isDone();
  });

  test('It works with PageType Fetching Errors', async () => {
    
    // Example.org mocks
    const exampleScope = nock('https://example.org')
      // Sitemap Mock.
      .get('/sitemap.xml')
        .reply(200, `<?xml version="1.0" encoding="UTF-8"?>
          <?xml-stylesheet type="text/xsl" href="/sitemap.xsl"?>
          <!--Generated by the Simple XML Sitemap Drupal module: https://drupal.org/project/simple_sitemap.-->
          <urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9" xmlns:xhtml="http://www.w3.org/1999/xhtml" xmlns:image="http://www.google.com/schemas/sitemap-image/1.1">
          <url>
            <loc>https://example.org/test-web-page</loc>
            <xhtml:link rel="alternate" hreflang="en" href="https://example.org/test-web-page/"/>
            <changefreq>daily</changefreq>
            <priority>1.0</priority>
          </url>
          </urlset>
        `)
      // Page Type Fetcher
      .head('/test-web-page')
        .reply(503);

    const psiPageFetcher = new PsiUrlFetcher({ apikey: '11111' });
    const psiProcessor = new PsiProcessor(psiPageFetcher);    
    const sitemapScraper = new SitemapScraper();
    const pageTypeFetcher = new PageTypeFetcher();
    const queueStorage = new QueueStorage(":memory:");
    
    const fetcher = new Fetcher(psiProcessor, sitemapScraper, pageTypeFetcher, queueStorage);
    await fetcher.fetch('https://example.org/sitemap.xml');

    // Make sure the queue is as expected and everything was fetched.
    const expectedQueue = []
    const actualQueue = queueStorage.getQueueItems({ includeReports: true });
    expect(actualQueue).toEqual(expectedQueue);

    // Make sure the ignore URLs are as they should be.
    const expectedIgnoreUrls = [
      { id: 1, url: 'https://example.org/test-web-page', status: 503, contenttype: 'unknown' }
    ];
    const actualIgnoreUrls = queueStorage.getIgnoreUrls();
    expect(actualIgnoreUrls).toEqual(expectedIgnoreUrls);

    exampleScope.isDone();
  });

});